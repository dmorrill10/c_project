#!/usr/bin/env ruby
require "rubygems"
require 'thor'
require 'date'

module CProject
  class NewProject < Thor::Group
    include Thor::Actions

    EXECUTABLE_PERMISSIONS = 0775

    argument :name, :desc => 'Name of the new project.'

    def self.source_root
      File.expand_path('../../', __FILE__)
    end

    def gen_root
      empty_directory name
    end

    def fill_root
      create_file_from_shared_template "LICENCE"
      empty_directory file_path('bin')
      empty_directory file_path('experiments')
      shared_directory 'scripts'
      chmod file_path('scripts/start_new_experiment.sh'), EXECUTABLE_PERMISSIONS
      chmod file_path('scripts/experiment'), EXECUTABLE_PERMISSIONS
    end

    private

    def header_guard
      "__#{name.upcase}_H__"
    end

    def file_path(file_name)
      File.join name, file_name
    end

    def create_file_from_shared_template(file_name)
      template(
        "templates/#{file_name}.tt",
        file_path(file_name)
      )
    end

    def shared_directory(dir)
      directory "templates/#{dir}", file_path(dir)
    end
  end

  class C < NewProject
    def fill_root
      super
      create_file_from_template "README.md"
      create_file_from_template "Makefile"
    end

    def src
      create_file_from_template 'src/CExceptionConfig.h'
      template 'templates/c/src/c_project.c.tt', file_path("src/#{name}.c")
      template 'templates/c/src/c_project.h.tt', file_path("src/#{name}.h")
      create_file_from_template 'src/main.c'
    end

    def test
      template 'templates/c/test/test_c_project.c.tt', file_path("test/test_#{name}.c")
    end

    def support
      create_file_from_template 'test/support/test_helper.c'
      create_file_from_template 'test/support/test_helper.h'
    end

    def vendor
      directory 'templates/c/vendor', file_path("vendor")
      shared_directory 'vendor/commander.c'
    end

    private

    def create_file_from_template(file_name)
      template(
        "templates/c/#{file_name}.tt",
        file_path(file_name)
      )
    end

    def extension
      'c'
    end

    def compiler
      'CC'
    end
  end

  class Cpp < NewProject
    include Thor::Actions

    argument :name, :desc => 'Name of the new project.'

    def self.source_root
      File.expand_path('../../', __FILE__)
    end

    def fill_root
      super
      create_file_from_template "README.md"
      create_file_from_template "Makefile"
    end

    def src
      template 'templates/cpp/src/project.cpp.tt', file_path("src/#{name}.cpp")
      template 'templates/cpp/src/project.hpp.tt', file_path("src/#{name}.hpp")
      create_file_from_template 'src/main.cpp'
    end

    def test
      template 'templates/cpp/test/test_project.cpp.tt', file_path("test/test_#{name}.cpp")
    end

    def support
      create_file_from_template 'test/support/test_helper.cpp'
      create_file_from_template 'test/support/test_helper.hpp'
    end

    def vendor
      directory 'templates/cpp/vendor', file_path("vendor")
      shared_directory 'vendor/commander.c'
    end

    private

    def create_file_from_template(file_name)
      template(
        "templates/cpp/#{file_name}.tt",
        file_path(file_name)
      )
    end

    def extension
      'cpp'
    end

    def compiler
      'CCPP'
    end
  end

  class CProject < Thor
    register(
      C,
      'c',
      'c NAME',
      "Creates a new C project the name NAME"
    )
    tasks["c"].options = C.class_options

    register(
      Cpp,
      'c++',
      'c++ NAME',
      "Creates a new C++ project the name NAME"
    )
    tasks["c++"].options = Cpp.class_options
  end
end

CProject::CProject.start(ARGV)
